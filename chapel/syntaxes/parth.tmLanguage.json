{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"fileTypes": [
		"parth"
	  ],
	  "foldingStartMarker": "(?x)\n             /\\*\\*(?!\\*)\n            |^(?![^{]*?//|[^{]*?/\\*(?!.*?\\*/.*?\\{)).*?\\{\\s*($|//|/\\*(?!.*?\\*/.*\\S))\n        ",
	  "foldingStopMarker": "(?<!\\*)\\*\\*/|^\\s*\\}",
	"name": "parth",
	"patterns": [
		{
		  "include": "#comments"
		},
		{
		  "match": "\\b(align|as|atomic|begin|borrowed|break|by|catch|class|cobegin|coforall|continue|delete|dmapped|do|else|enum|except|export|extern|for|forall|if|import|index|inline|in|inout|iter|label|lambda|let|lifetime|local|module|new|noinit|on|only|otherwise|out|override|owned|pragma|private|proc|prototype|public|record|reduce|require|return|scan|select|serial|shared|sync|then|throw|throws|try|union|unmanaged|use|when|where|while|with|yield|zip)\\b",
		  "name": "keyword.control.parth"
		},
		{
		  "match": "\\b(bool|bytes|complex|dmap|domain|imag|int|nothing|opaque|range|real|string|subdomain|tuple|uint|void)\\b",
		  "name": "storage.type.parth"
		},
		{
		  "match": "\\b(borrowed|config|const|enum|owned|param|private|public|ref|single|shared|sparse|sync|type|unmanaged|var)\\b",
		  "name": "storage.modifier.parth"
		},
		{
		  "match": "\\b(true|false|nil)\\b",
		  "name": "constant.language.parth"
		},
		{
		  "match": "\\b((0(b|B)[0-1]([0-1]|_)*)|(0(o|O)[0-7]([0-7]|_)*)|(0(x|X)((([0-9a-fA-F]([0-9a-fA-F]|_)*\\.?([0-9a-fA-F]([0-9a-fA-F]|_)*)?)|(\\.[0-9a-fA-F]([0-9a-fA-F]|_)*))((p|P)(\\+|-)?[0-9]([0-9]|_)*)?))|(0(x|X)[0-9a-fA-F]([0-9a-fA-F]|_)*)|((([0-9]([0-9]|_)*\\.?([0-9]([0-9]|_)*)?)|(\\.[0-9]([0-9]|_)*))((e|E)(\\+|-)?[0-9]([0-9]|_)*)?))\\b",
		  "name": "constant.numeric.parth"
		},
		{
		  "match": "\\b(FileAccessMode|here|LocaleSpace|Locales|locale|numLocales|super|these|this)\\b",
		  "name": "variable.language.parth"
		},
		{
		  "begin": "\"",
		  "beginCaptures": {
			"0": {
			  "name": "punctuation.definition.string.begin.parth"
			}
		  },
		  "end": "\"",
		  "endCaptures": {
			"0": {
			  "name": "punctuation.definition.string.end.parth"
			}
		  },
		  "name": "string.quoted.double.parth",
		  "patterns": [
			{
			  "include": "#string_escaped_char"
			},
			{
			  "include": "#string_placeholder"
			}
		  ]
		},
		{
		  "begin": "'",
		  "beginCaptures": {
			"0": {
			  "name": "punctuation.definition.string.begin.parth"
			}
		  },
		  "end": "'",
		  "endCaptures": {
			"0": {
			  "name": "punctuation.definition.string.end.parth"
			}
		  },
		  "name": "string.quoted.single.parth",
		  "patterns": [
			{
			  "include": "#string_escaped_char"
			},
			{
			  "include": "#string_placeholder"
			}
		  ]
		},
		{
		  "match": "<\\=|>\\=|\\=\\=|<|>|\\!\\=",
		  "name": "keyword.operator.comparison.parth"
		},
		{
		  "match": "\\+\\=|-\\=|\\*\\=|/\\=|//\\=|%\\=|&\\=|\\|\\=|\\^\\=|>>\\=|<<\\=|\\*\\*\\=",
		  "name": "keyword.operator.assignment.augmented.parth"
		},
		{
		  "match": "\\+|\\-|\\*|\\*\\*|/|//|%|<<|>>|&|\\||\\^|~|<\\=>\\\\.\\.\\.",
		  "name": "keyword.operator.arithmetic.parth"
		},
		{
		  "match": "\\=",
		  "name": "keyword.operator.assignment.parth"
		},
		{
		  "match": ":",
		  "name": "keyword.operator.others.parth"
		},
		{
		  "match": "\\[|\\]",
		  "name": "keyword.operator.domain.parth"
		},
		{
		  "begin": "^\\s*(proc)\\s+(?=[A-Za-z_][A-Za-z0-9_]*)",
		  "beginCaptures": {
			"1": {
			  "name": "keyword.control.parth"
			}
		  },
		  "end": "(\\()|\\s*($\\n?|#.*$\\n?)",
		  "name": "meta.function.parth",
		  "patterns": [
			{
			  "begin": "(?=[A-Za-z_][A-Za-z0-9_]*)",
			  "contentName": "entity.name.function.parth",
			  "end": "(?![A-Za-z0-9_])"
			},
			{
			  "contentName": "keyword.control.parth",
			  "match": "proc"
			},
			{
			  "begin": "(\\()",
			  "contentName": "meta.function.parameters.parth",
			  "end": "(?=\\)).*\\{",
			  "patterns": [
				{
				  "captures": {
					"1": {
					  "name": "variable.parameter.function.parth"
					}
				  },
				  "match": "\\b([a-zA-Z_][a-zA-Z_0-9]*)"
				}
			  ]
			}
		  ]
		},
		{
		  "begin": "(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*\\s*\\()",
		  "end": "(\\))",
		  "name": "meta.function-call.parth",
		  "patterns": [
			{
			  "begin": "(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*)*\\s*\\()",
			  "end": "(?=\\s*\\()",
			  "patterns": [
				{
				  "include": "#builtin_functions"
				}
			  ]
			},
			{
			  "begin": "(\\()",
			  "beginCaptures": {
				"1": {
				  "name": "punctuation.definition.arguments.begin.parth"
				}
			  },
			  "contentName": "meta.function-call.arguments.parth",
			  "end": "(?=\\))",
			  "patterns": [
				{
				  "include": "$self"
				}
			  ]
			}
		  ]
		}
	  ],
	  "repository": {
		"builtin_functions": {
		  "match": "(?x)\\b(\n                       abs | close | exit| max | min | open | read | readln | sqrt | write | writeln\n                \n                )\\b",
		  "name": "support.function.builtin.parth"
		},
		"comments": {
		  "patterns": [
			{
			  "captures": {
				"1": {
				  "name": "meta.toc-list.banner.block.c"
				}
			  },
			  "match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
			  "name": "comment.block.parth"
			},
			{
			  "begin": "/\\*",
			  "captures": {
				"0": {
				  "name": "punctuation.definition.comment.c"
				}
			  },
			  "end": "\\*/",
			  "name": "comment.block.parth"
			},
			{
			  "match": "\\*/.*\\n",
			  "name": "invalid.illegal.stray-comment-end.c"
			},
			{
			  "captures": {
				"1": {
				  "name": "meta.toc-list.banner.line.c"
				}
			  },
			  "match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
			  "name": "comment.line.banner.c++"
			},
			{
			  "begin": "//",
			  "beginCaptures": {
				"0": {
				  "name": "punctuation.definition.comment.c"
				}
			  },
			  "end": "$\\n?",
			  "name": "comment.line.double-slash.c++",
			  "patterns": [
				{
				  "match": "(?>\\\\\\s*\\n)",
				  "name": "punctuation.separator.continuation.c++"
				}
			  ]
			}
		  ]
		},
		"entity_name_function": {
		  "patterns": [
			{
			  "include": "#illegal_names"
			},
			{
			  "include": "#generic_names"
			}
		  ]
		},
		"generic_names": {
		  "match": "[A-Za-z_][A-Za-z0-9_]*"
		},
		"illegal_names": {
		  "match": "\\b(align|as|atomic|begin|borrowed|break|by|bytes|catch|class|cobegin|coforall|continue|delete|dmapped|do|else|enum|except|export|extern|for|forall|if|import|index|inline|in|inout|iter|label|lambda|let|lifetime|local|module|new|noinit|nothing|on|only|otherwise|out|override|owned|pragma|private|proc|public|record|reduce|ref|require|return|scan|select|serial|shared|single|sync|then|throw|throws|try|union|unmanaged|use|var|void|when|where|while|with|yield|zip)\\b",
		  "name": "invalid.illegal.name.parth"
		},
		"string_escaped_char": {
		  "patterns": [
			{
			  "match": "\\\\(\\\\|[abefnprtv'\"?]|[0-3]\\d{0,2}|[4-7]\\d?|x[a-fA-F0-9]{0,2}|u[a-fA-F0-9]{0,4}|U[a-fA-F0-9]{0,8})",
			  "name": "constant.character.escape.c"
			},
			{
			  "match": "\\\\.",
			  "name": "invalid.illegal.unknown-escape.c"
			}
		  ]
		},
		"string_placeholder": {
		  "patterns": [
			{
			  "match": "(?x)%\n                                (\\d+\\$)?                             # field (argument #)\n                                [#0\\- +']*                           # flags\n                                [,;:_]?                              # separator character (AltiVec)\n                                ((-?\\d+)|\\*(-?\\d+\\$)?)?              # minimum field width\n                                (\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?         # precision\n                                (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n                                [diouxXDOUeEfFgGaACcSspn%]           # conversion type\n                            ",
			  "name": "constant.other.placeholder.c"
			}
		  ]
		}
	  },
	  "scopeName": "source.parth",
	  "uuid": "3FFA0C9B-EC75-41CA-8152-E001E11E16E3"
}